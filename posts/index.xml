<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Melo&#39;s Blog</title>
		<link>https://blog.xn--4gq986klnp.cn/posts/</link>
		<description>Recent content in Posts on Melo&#39;s Blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-CN</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 10 Nov 2021 00:59:02 +0800</lastBuildDate>
		<atom:link href="https://blog.xn--4gq986klnp.cn/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>个人常用的 Docker 镜像安装记录</title>
			<link>https://blog.xn--4gq986klnp.cn/posts/docker-study-note/</link>
			<pubDate>Wed, 10 Nov 2021 00:59:02 +0800</pubDate>
			
			<guid>https://blog.xn--4gq986klnp.cn/posts/docker-study-note/</guid>
			<description>0. Portainer a. 创建 Portainer Server 将用于存储其数据库的卷： docker volume create portainer_data b. 下载并安装 Portainer Server 容器： docker run -d -p 8000:8000 -p 9443:9443 --name portainer \ --restart=always \ -v /var/run/docker.sock:/var/run/docker.sock \ -v portainer_data:/data \ portainer/portainer-ce:latest 1. Epic 周免游戏自动领取 首先创建 docker-compose.yml 文件</description>
			<content type="html"><![CDATA[<h2 id="0-portainer">0. Portainer</h2>
<h3 id="a-创建-portainer-server-将用于存储其数据库的卷">a. 创建 Portainer Server 将用于存储其数据库的卷：</h3>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker volume create portainer_data
</code></pre></div><h3 id="b-下载并安装-portainer-server-容器">b. 下载并安装 Portainer Server 容器：</h3>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker run -d -p 8000:8000 -p 9443:9443 --name portainer <span class="se">\
</span><span class="se"></span>    --restart<span class="o">=</span>always <span class="se">\
</span><span class="se"></span>    -v /var/run/docker.sock:/var/run/docker.sock <span class="se">\
</span><span class="se"></span>    -v portainer_data:/data <span class="se">\
</span><span class="se"></span>    portainer/portainer-ce:latest
</code></pre></div><hr>
<h2 id="1-epic-周免游戏自动领取">1. Epic 周免游戏自动领取</h2>
<p>首先创建 docker-compose.yml 文件，内容如下:</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="nt">epic-a</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">luminoleon/epicgames-claimer</span><span class="w">
</span><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">epic-a</span><span class="w">
</span><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">unless-stopped</span><span class="w">
</span><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">TZ=Asia/Shanghai</span><span class="w">
</span><span class="w">      </span>- <span class="l">AUTO_UPDATE=true</span><span class="w">
</span><span class="w">      </span>- <span class="l">EMAIL=邮箱</span><span class="w">
</span><span class="w">      </span>- <span class="l">PASSWORD=密码</span><span class="w">
</span><span class="w">  </span><span class="nt">epic-b</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">luminoleon/epicgames-claimer</span><span class="w">
</span><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">epic-b</span><span class="w">
</span><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">unless-stopped</span><span class="w">
</span><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">TZ=Asia/Shanghai</span><span class="w">
</span><span class="w">      </span>- <span class="l">AUTO_UPDATE=true</span><span class="w">
</span><span class="w">      </span>- <span class="l">EMAIL=另一个邮箱</span><span class="w">
</span><span class="w">      </span>- <span class="l">PASSWORD=另一个密码</span><span class="w">
</span></code></pre></div><p>然后执行命令:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker-compose up -d
</code></pre></div><hr>
<h2 id="2-vaultwarden原-bitwarden">2. Vaultwarden（原 Bitwarden）</h2>
<h3 id="a-映射文件目录创建">a. 映射文件目录创建</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">mkdir -p /usr/local/apps/vaultwarden/data  /usr/local/apps/nginx/conf.d /usr/local/apps/nginx/ssl
touch /usr/local/apps/vaultwarden/.env /usr/local/apps/nginx/conf.d/bitwarden.conf
</code></pre></div><h3 id="b-创建-docker-compose-文件">b. 创建 Docker compose 文件</h3>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3.3&#39;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">nginx</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx:stable</span><span class="w">
</span><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">/usr/local/apps/nginx/conf.d:/etc/nginx/conf.d</span><span class="w">
</span><span class="w">      </span>- <span class="l">/usr/local/apps/nginx/ssl:/etc/ssl</span><span class="w">
</span><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="s2">&#34;59995:443&#34;</span><span class="w">
</span><span class="w">
</span><span class="w"> </span><span class="nt">vaultwarden</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">vaultwarden/server:latest</span><span class="w">
</span><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">bitwarden</span><span class="w">
</span><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">/usr/local/apps/vaultwarden/data:/data/</span><span class="w">
</span><span class="w">      </span>- <span class="l">/usr/local/apps/vaultwarden/.env:/.env</span><span class="w"> </span><span class="c">#从.env文件中加载环境变量 </span><span class="w">
</span><span class="w">
</span><span class="w">
</span></code></pre></div><h3 id="c-修改-vaultwarden-的配置文件-env">c. 修改 Vaultwarden 的配置文件 <code>.env</code></h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">SIGNUPS_ALLOWED</span><span class="o">=</span><span class="n">false</span>  <span class="c1"># 是否开放注册，个人使用建议否</span>
<span class="n">ADMIN_TOKEN</span><span class="o">=</span><span class="mi">123456</span>  <span class="c1"># 自行设置后台管理密码</span>
</code></pre></div><p>然后执行命令:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker-compose up -d
</code></pre></div><h3 id="d-配置-nginx-文件存放在本地映射文件夹下">d. 配置 Nginx 文件，存放在本地映射文件夹下</h3>
<div class="highlight"><pre class="chroma"><code class="language-nginx" data-lang="nginx"><span class="k">server</span> <span class="p">{</span>
  <span class="kn">listen</span> <span class="mi">443</span> <span class="s">ssl</span> <span class="s">http2</span><span class="p">;</span>
  <span class="kn">server_name</span> <span class="s">your.domin</span><span class="p">;</span> <span class="c1">#修改域名
</span><span class="c1"></span>
  <span class="kn">ssl_certificate</span>      <span class="s">/etc/ssl/certs/yourkeyname.pem</span><span class="p">;</span>   
  <span class="kn">ssl_certificate_key</span>  <span class="s">/etc/ssl/certs/yourkeyname.key</span><span class="p">;</span> 


  <span class="c1"># Allow large attachments
</span><span class="c1"></span>  <span class="kn">client_max_body_size</span> <span class="s">128M</span><span class="p">;</span>

  <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
    <span class="c1">#个人修改容器内 Vaultwarden 的ip及端口，不知道规不规范，请指正
</span><span class="c1"></span>    <span class="kn">proxy_pass</span> <span class="s">http://172.19.0.3:80</span><span class="p">;</span>
    <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
    <span class="kn">proxy_set_header</span> <span class="s">X-Real-IP</span> <span class="nv">$remote_addr</span><span class="p">;</span>
    <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
    <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-Proto</span> <span class="nv">$scheme</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kn">location</span> <span class="s">/notifications/hub</span> <span class="p">{</span>
    <span class="c1">#websocket 端口
</span><span class="c1"></span>    <span class="kn">proxy_pass</span> <span class="s">http://172.19.0.3:3012</span><span class="p">;</span>
    <span class="kn">proxy_set_header</span> <span class="s">Upgrade</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
    <span class="kn">proxy_set_header</span> <span class="s">Connection</span> <span class="s">&#34;upgrade&#34;</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kn">location</span> <span class="s">/notifications/hub/negotiate</span> <span class="p">{</span>
    <span class="c1">#个人修改容器内 Vaultwarden 的ip及端口，不知道规不规范，请指正
</span><span class="c1"></span>    <span class="kn">proxy_pass</span> <span class="s">http://172.19.0.3:80</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>重启 Nginx 容器即可生效</p>
<hr>
<h3 id="3-heimdall-导航">3. Heimdall 导航</h3>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2.1&#34;</span><span class="w">
</span><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">heimdall</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">lscr.io/linuxserver/heimdall</span><span class="w">
</span><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">heimdall</span><span class="w">
</span><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">PUID=1000</span><span class="w">
</span><span class="w">      </span>- <span class="l">PGID=1000</span><span class="w">
</span><span class="w">      </span>- <span class="l">TZ=Asia/Shanghai</span><span class="w">
</span><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">&lt;/path/to/appdata/config&gt;:/config</span><span class="w">
</span><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="m">80</span><span class="p">:</span><span class="m">80</span><span class="w">
</span><span class="w">      </span>- <span class="m">443</span><span class="p">:</span><span class="m">443</span><span class="w">
</span><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">unless-stopped</span><span class="w">
</span></code></pre></div><blockquote>
<p>需要以非 root 用户部署</p>
</blockquote>
<hr>
<h3 id="4-为知笔记-wiz放弃折腾">4. 为知笔记 Wiz（放弃折腾）</h3>
<blockquote>
<p>不知道什么原因手机 4G 网络访问不了，并且容器占用资源多，暂时放弃折腾，需要的话先用 Coding 在线编辑器对付用一下，或着有空试一下 Joplin</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">docker run --name wiz --restart<span class="o">=</span>always -it -d -v  ~/wizdata:/wiz/storage -v  /etc/localtime:/etc/localtime -p 80:80 -p 9269:9269/udp  wiznote/wizserver
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>腾讯云部署（几乎）白嫖 Bitwarden</title>
			<link>https://blog.xn--4gq986klnp.cn/posts/bitwarden/</link>
			<pubDate>Mon, 01 Nov 2021 22:18:39 +0800</pubDate>
			
			<guid>https://blog.xn--4gq986klnp.cn/posts/bitwarden/</guid>
			<description>0. 前言 随着在大大小小各式各样网站注册的账号增多，需要记下的账号密码也特别容易忘记，况且所有网站都用相同的用户名密码特别不安全。这时需要小本本</description>
			<content type="html"><![CDATA[<h2 id="0-前言">0. 前言</h2>
<p>随着在大大小小各式各样网站注册的账号增多，需要记下的账号密码也特别容易忘记，况且所有网站都用相同的用户名密码特别不安全。这时需要小本本挨个几下，确实很麻烦，随身携带个小本本确实也不方便，因此利用密码管理工具就显得尤为重要。这类工具的老大 1Password 闭源且收费，再说了为了保管密码一个月十块二十块的也没大必要，而 Bitwarden 则是一个免费、跨平台，且可以私有化部署的开源密码管理工具。</p>
<p>部署 Bitwarden 的方式可以是本地服务器 nas 之类的，也可以在云服务器上部署，具体方法网上能搜一大堆。但这些方式还是有一些数据安全的不确定性，比如 nas 的硬盘挂了。相比之下，用腾讯云部署并托管还是比较安全可靠的方式（别欠费就行），且几乎能白嫖，不需要自己的服务器，不会浪费自己服务器的资源，因此选用这种方式部署 Bitwarden 是个人最喜欢的。</p>
<h2 id="1-准备">1. 准备</h2>
<ul>
<li>腾讯云实名认证账号</li>
<li>一点耐心</li>
</ul>
<h2 id="2-步骤">2. 步骤</h2>
<h3 id="i">I</h3>
<p>访问<a href="https://github.com/hang666/bitwarden">https://github.com/hang666/bitwarden</a></p>
<p>Vaultwarden 基于云开发部署项目，支持一键云端部署，访问后点击<strong>SQLite 部署（文件存储）</strong> 后的部署按钮即可跳转到腾讯云部署配置页面，一般个人使用的话 SQLite 就够用了，不需要 Mysql ，使用 Mysql 会额外收费。</p>
<h3 id="ii">II</h3>
<p>后续跟着步骤走：选择地域，起一个环境名称，记得勾选「开启免费资源」，确定授予权限，点击完成，等待两三分钟后部署成功。</p>
<h3 id="iii">III</h3>
<p>部署成功后，在<strong>我的应用</strong>内找到链接并访问，即可进入到 Vaultwarden ，创建账号。</p>
<h3 id="iiii">IIII</h3>
<p>创建完账号后，回到腾讯云开发，点击左侧云托管，选择 bitwarden 服务，选择版本，在下方配置信息模块选择「编辑配置并重新部署」，将环境变量修改为（报错把 # 去掉）：</p>
<pre><code>{
  &quot;TCB_COMMIT_ID&quot;: &quot;&quot;,
  &quot;WEBSOCKET_ENABLED&quot;: &quot;false&quot;,
  &quot;ADMIN_TOKEN&quot;: &quot;aaaaaa&quot;, #管理员密码自行修改
  &quot;SIGNUPS_ALLOWED&quot;: &quot;false&quot; #建议不开放注册
}
</code></pre><p>保存并重新部署</p>
<p>这样，通过访问 /admin 即可进入到管理后台</p>
<h2 id="3-客户端下载">3. 客户端下载</h2>
<p>由于官网 <a href="https://www.bitwarden.com">https://www.bitwarden.com</a> 由于某些原因无法访问，建议不要随便在网上搜索下载，而是去官方的 Github 页下载，个人使用较多的是 Chrome 的插件版及安卓 app ，下面贴俩地址，其他的请自行寻找。</p>
<p><a href="https://github.com/bitwarden/browser/releases">浏览器插件</a></p>
<p><a href="https://github.com/bitwarden/mobile/releases">移动端 app</a></p>
]]></content>
		</item>
		
		<item>
			<title>Kegin T201p</title>
			<link>https://blog.xn--4gq986klnp.cn/posts/kegin-t201p/</link>
			<pubDate>Thu, 09 Sep 2021 18:27:49 +0800</pubDate>
			
			<guid>https://blog.xn--4gq986klnp.cn/posts/kegin-t201p/</guid>
			<description>当我发现我想写日记的时候，就总要逼迫自己用特别正式的口吻去表达，这样的思想成为了我记录文字的枷锁，本身这些内容就是写给自己看的，不必那么认真</description>
			<content type="html"><![CDATA[<blockquote>
<p>当我发现我想写日记的时候，就总要逼迫自己用特别正式的口吻去表达，这样的思想成为了我记录文字的枷锁，本身这些内容就是写给自己看的，不必那么认真，我就应该想说啥就说啥</p>
</blockquote>
<h2 id="0-前言">0. 前言</h2>
<p>先说一下接触 nas 的经历，之前大概 17 年在北京跟张鹏纪傲一起住的时候，我们一起办了联通宽带，送了一台 IPTV 的盒子，这种盒子与其他的电视盒子一样，本身就有安装安卓视频软件的功能，奈何宽带运营商的盒子把这部分功能阉割了，于是我就开始折腾刷机，这台北京联通 Q5 的芯片是 S905 系列，因为有很多款，当时为了找兼容的刷机包还费了很大劲。结果盒子在我疯狂的折腾下，并不怎么好用，反而失去了原有的 IPTV 看电视直播的体验，虽然大伙其实都不怎么看电视，但其实还是给大家造成了一点小影响。</p>
<p>21 年 3 月份偶然得知，这种 Q5 盒子可以刷 Armbian 系统，也就是专为 arm 芯片重新编译的 Debian系统，这又重拾了我想了解 Linux 的热情，于是淘了一个二手的盒子，进行尝试，从此折腾 nas 的种子开始埋下。</p>
<p>也是在 21 年的 3 月份，在某论坛看到腾讯云的云服务器，折扣价很便宜，2C-4G-80G-6M（之后免费升级到 8M）的配置大概是 400 左右 3 年，也不知道怎么想的，在生活很拮据的时候买了它。腾讯轻量云提供的镜像不仅包含 Ubuntu、CentOS、Debian 等系统镜像，也了解了 Docker 还有安装好宝塔、Cloudreve、Nextcloud 等应用型镜像，在这里我第一次了解到宝塔这种服务器可视化运维，也第一次知道可以私有部署的开源云盘项目。但是用轻量云安装 Cloudreve 实际使用容量也只有80G，何不用电视盒子利用家里的带宽部署自己的云盘？</p>
<p>Q5 盒子在实际使用上有太多局限，折腾一阵之后，开始物色其他垃圾产品，玩客云据说偷跑上传而且刷机麻烦，蜗牛星际和暴风酷播云这种矿渣价格已经起飞，最终选择了著名的理财产品斐讯 N1。</p>
<blockquote>
<p>未完待续……</p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>利用 Gooreplacer 解决 reCAPTCHA 无法显示的问题</title>
			<link>https://blog.xn--4gq986klnp.cn/posts/ues-gooreplacer-to-display-recaptcha/</link>
			<pubDate>Sat, 04 Sep 2021 12:44:00 +0800</pubDate>
			
			<guid>https://blog.xn--4gq986klnp.cn/posts/ues-gooreplacer-to-display-recaptcha/</guid>
			<description>0. 前言 对于某些网站登录注册，需要使用 reCAPTCHA 进行验证。reCAPTCHA 是谷歌的验证码服务，众所周知，没有这个网站，所以验证码无法加载。那么该如何</description>
			<content type="html"><![CDATA[<h2 id="0-前言">0. 前言</h2>
<p>对于某些网站登录注册，需要使用 reCAPTCHA 进行验证。reCAPTCHA 是谷歌的验证码服务，众所周知，没有这个网站，所以验证码无法加载。那么该如何解决呢？</p>
<p>Gooreplacer 是一个用来重定向/屏蔽 URL 的浏览器插件，我们把国内无法访问的 <code>www.google.com/recaptcha</code> 重定向为国内能够访问的 <code>recaptcha.net/recaptcha</code> 使得验证码可以加载。</p>
<p><img src="/image/ues-gooreplacer-to-display-recaptcha/gooreplacer-preview.png" alt="alt Gooreplacer" title="Gooreplacer 预览"></p>
<h2 id="1-下载及安装">1. 下载及安装</h2>
<h3 id="方法一插件商店安装">方法一：插件商店安装</h3>
<p>不多赘述，Firefox 浏览器、EDGE 浏览器可直接到扩展商店下载安装，Chrome 自己想办法进应用商店</p>
<h3 id="方法二扩展包文件下载安装">方法二：扩展包文件下载安装</h3>
<p><a href="https://github.com/jiacai2050/gooreplacer/releases">Github下载链接</a></p>
<p>下载好 zip 文件后，本地解压。之后在 <code>chrome://extensions/</code> 选中开发者模式，选择「加载已解压的扩展程序」即可。</p>
<h2 id="2-设置规则加载-recaptcha">2. 设置规则加载 reCAPTCHA</h2>
<p>点击添加按钮，填入信息，保存提交：</p>
<p>匹配模式：</p>
<pre><code>www.google.com/recaptcha
</code></pre><p>目标地址：</p>
<pre><code>recaptcha.net/recaptcha
</code></pre><h2 id="3-拓展">3. 拓展</h2>
<p>知道了 Gooreplacer 的作用，可以用它来重定向谷歌资源如字体、API等提高网页访问速度。具体使用方法请参考作者的 Github 学习更多。</p>
<blockquote>
<p><a href="https://github.com/jiacai2050/gooreplacer">作者jiacai2050</a></p>
</blockquote>
<blockquote>
<p><a href="https://github.com/jiacai2050/gooreplacer/blob/master/doc/guides.md">自动跳转知乎链接、防运营商劫持</a></p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>利用 Cloud Studio 云端搭建 Hugo 博客</title>
			<link>https://blog.xn--4gq986klnp.cn/posts/cloud-studio-hugo/</link>
			<pubDate>Mon, 26 Apr 2021 17:31:02 +0800</pubDate>
			
			<guid>https://blog.xn--4gq986klnp.cn/posts/cloud-studio-hugo/</guid>
			<description>需求 之前在 Linux 上部署了 Hugo 的博客，发现我需要在不同设备上都安装 Hugo，而且是在不同的环境下，就显得很麻烦，即便可以通过 Github 同步博客的源文件，但还</description>
			<content type="html"><![CDATA[<h3 id="需求">需求</h3>
<p>之前在 Linux 上部署了 Hugo 的博客，发现我需要在不同设备上都安装 Hugo，而且是在不同的环境下，就显得很麻烦，即便可以通过 Github 同步博客的源文件，但还是感觉麻烦，用一台服务器的话又闲贵，所以想到了下面的方法</p>
<h3 id="想法">想法</h3>
<p><a href="https://coding.net/">Coding</a> 的 Cloud Studio 具体就不介绍了，去搜把，就是在浏览器运行 VS Code ，可以编写、调试代码，内置 Linux 环境终端，刚好可以利用这个功能来安装 Hugo 实现在线撰写并部署，类似于一台云主机</p>
<h3 id="思路">思路</h3>
<p>注册Coding，进入到个人控制面板，在左侧选择 <code>Cloud Studio</code> 进入到在线 IDE 的界面，新建一个<code>工作空间</code>，运行环境选择<code>内置环境</code>，后面需要的环境按需求选择，我选的就是 Ubuntu 18.04，确认后就进入到在线的 IDE 界面了，上方菜单选择<code>终端</code>-&gt;<code>新终端</code>，接下来的操作就参考上一篇内容<a href="https://xn--4gq986klnp.cn/posts/hugo-github-personalblog/">《Hugo+Github Pages 搭建个人博客手记萌新向》</a>像新机器一样操作就好了</p>
<h3 id="结语">结语</h3>
<p>Cloud Studio 对于开发者来说确实是个不错的工具，对于不会开发的我也有其利用价值，它的功能相当于免费获得了一台云主机，不再受地点，设备所约束，源文件也保存在远程的服务器上，内置在线版 VS Code 可以安装 Markdown 插件使写作更加便捷，虽然每天只有4小时的可用时间，但对于我来说已经是足够用了，感谢技术</p>
]]></content>
		</item>
		
		<item>
			<title>Hugo&#43;Github Pages 搭建个人博客手记萌新向</title>
			<link>https://blog.xn--4gq986klnp.cn/posts/hugo-github-personalblog/</link>
			<pubDate>Mon, 19 Apr 2021 21:23:20 +0800</pubDate>
			
			<guid>https://blog.xn--4gq986klnp.cn/posts/hugo-github-personalblog/</guid>
			<description>0. 前言 记得在19年那段时间，在无意间了解到 Github Pages 可以托管静态页面作为个人博客站，于是开始兴致勃勃研究了一会，新鲜几天之后，搭建完毕，还绑了自己</description>
			<content type="html"><![CDATA[<h2 id="0-前言">0. 前言</h2>
<p>记得在19年那段时间，在无意间了解到 Github Pages 可以托管静态页面作为个人博客站，于是开始兴致勃勃研究了一会，新鲜几天之后，搭建完毕，还绑了自己名字的域名，就扔在那了，一篇内容都没有写。随着时间的推移，Hexo 该怎么使用，用哪些 git 命令已经忘得一干二净了。</p>
<p>然而最近又有了维护一个自己博客的冲动，然而安装 Hexo 并没我记忆中的那么顺利，让我不得不放弃 Hexo 而选择其他工具，最终确定 Hugo（主要是喜欢 Hugo 的这个主题），所以本篇我就记录一下我利用 Hugo 搭建个人博客的过程</p>
<p>但是我这次先把内容先写一部分再开始着手做搭建，一是不想让这次博客又白白搭建，二是作为以后使用的备忘手记（记性不好），其中参考了网上一些大神的教程及脚本，想详细学习的话推荐去看他的教程</p>
<blockquote>
<p><strong>Berlin</strong>
<a href="https://fengberlin.github.io/post/use-hugo-to-build-blog/">https://fengberlin.github.io/post/use-hugo-to-build-blog/</a></p>
</blockquote>
<h2 id="1-介绍">1. 介绍</h2>
<p>原理：利用工具将写作内容（Markdown）生成 HTML 静态页，将静态页上传至 Github，利用 Github Pages 的页面链接进行访问</p>
<h3 id="markdown">Markdown</h3>
<p>是一种轻量级标记语言,它允许人们使用易读易写的纯文本格式编写文档，由于 Markdown 的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。Markdown 的优势是可以利用一些简单的语法实现排版功能，没有那么多排版、字体的设置，简介易用。弄这些的人基本应该会懂把，懂洞东懂，不懂<a href="https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=markdown&amp;fenlei=256&amp;rsv_pq=dd688735000c19e5&amp;rsv_t=2df9kErCKYlOFqkZeoc6GLt4RRdD%2BTOq151y9yITY%2Bzy04gDNpDx8sx51Vs&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_dl=tb&amp;rsv_sug3=7&amp;rsv_sug1=3&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;rsv_btype=i&amp;inputT=2619&amp;rsv_sug4=2619&amp;rsv_sug=2">去搜</a>。</p>
<h3 id="静态页博客生成工具">静态页博客生成工具</h3>
<p>Hugo、Hexo、Jekyll、Gridea 是我所了解到比较常用的工具，当然，可能还有一些更热门更好用的工具只是我不知道而已</p>
<p>我只用过 Hexo 和 Hugo，之前用的是 Hexo，这次搭建用的是 Hugo，简要总结一下我对这俩工具的个人感受：</p>
<p>Hugo：</p>
<pre><code>+社区环境很好
+生成网站速度超快
+更简单轻量，能够让人更专注于写作
+个人更喜欢 Hugo 的主题
-每次写完都要删除 public 文件夹
-扩展性稍差
</code></pre>
<p>Hexo：</p>
<pre><code>+功能性、可扩展性强
+部署命令相对简洁
+也有很多不错的主题
-在配置 hexo 出现各种各样的问题（98.735%是我哪里没弄好）
</code></pre>
<p>其他的我也没使用过，想要了解的话<a href="https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=Jekyll%20Gridea&amp;fenlei=256&amp;rsv_pq=b1250ae500089051&amp;rsv_t=2bd8lZm6jmg6wcCXNtnKNqA2Um1IPCKWY9BCSNcoTfm%2FA7U9%2Bi4FDSvbjoU&amp;rqlang=cn&amp;rsv_dl=tb&amp;rsv_enter=1&amp;rsv_sug3=5&amp;rsv_sug1=1&amp;rsv_sug7=001&amp;rsv_n=2&amp;rsv_sug2=0&amp;rsv_btype=i&amp;inputT=10381&amp;rsv_sug4=10442&amp;rsv_sug=9">去搜</a></p>
<h3 id="github-pages">Github Pages</h3>
<p><a href="https://pages.github.com/">https://pages.github.com/</a> 介绍就不说了，看看就知道了</p>
<h2 id="2-部署过程">2. 部署过程</h2>
<h3 id="注册-github-并建立项目">注册 Github 并建立项目</h3>
<p>注册不说了
登录 Github，新建 repository，名称为 <code>&lt;username&gt;.github.io</code>（必须），作为 Github Pages 的页面地址
例如 Github 的用户名是 zhang3，则新建的项目名称为: <code>zhang3.github.io</code></p>
<p>再创建一个 repository，名称为 myhugo（任意），作为存放除了生成静态页以外的所有文件（例如 <code>config.toml</code> 配置文件等），这样即便本地原始文件清空了，或者更换设备时，都可以把源文件迁移过来（我之前用 hexo 的时候就没同步）</p>
<h3 id="安装-git已有请忽略">安装 git（已有请忽略）</h3>
<p>首先安装 git</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get install git -y
</code></pre></div><p>配置 Github 用户信息</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git config –-global user.name username    <span class="c1"># username填写Github用户名</span>
git config –-global user.email user@useremail.com    <span class="c1"># useremail填写Github用户名关联的邮箱地址</span>
</code></pre></div><p>生成 <code>ssh key</code> 关联 Github</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">ssh-keygen -t rsa -C “your_email@youremail.com” <span class="c1">#youremail填写Github用户名关联的邮箱地址</span>
</code></pre></div><p>三下回车后，会在根目录生成一个<code>.ssh</code>的文件夹，</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">cat ~/.ssh/id_rsa.pub
</code></pre></div><p>复制公钥的内容，登录 Github，点击头像 -&gt; Settings —&gt; SSH and GPG keys —&gt; New SSH key，把公钥的内容粘贴到 key 中，填好 title 并点击 Add SSH key
至此，关联完毕</p>
<p>测试是否关联成功</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">ssh git@github.com
</code></pre></div><p>若返回显示您的用户名即为关联成功</p>
<h3 id="hugo安装包下载">Hugo安装包下载</h3>
<p>我用的系统是 Ubuntu，其他系统例如 MacOS、Win、其他发行版 Linux 系统除了获取 Hugo 的方式稍有不同之外，几乎没有差别</p>
<p>利用 apt-get 方式安装的 Hugo 版本比较旧，达不到很多主题所要求的最低标准，所以我们选择在 GitHub 上下载最新版本的安装包</p>
<p>Hugo 安装包下载地址
<a href="https://github.com/gohugoio/hugo/releases">https://github.com/gohugoio/hugo/releases</a></p>
<h3 id="安装-hugo">安装 Hugo</h3>
<p>执行命令</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo dpkg -i &lt;文件名.deb&gt;
</code></pre></div><blockquote>
<p>dpkg 软件包管理器，-i 安装</p>
</blockquote>
<p>可能会报依赖关系的错误，执行命令修复安装</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get install -f
</code></pre></div><blockquote>
<p>-f : &ndash;fix-broken 的简写形式，修复依赖关系(depends)的命令</p>
</blockquote>
<h3 id="初始化-hugo">初始化 Hugo</h3>
<p>先 cd 到想要创建博客文件夹的上一级，尔后执行</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">hugo new site myblog  <span class="c1"># myblog就是生成博客之后存放的文件夹</span>
</code></pre></div><p>Hugo 会自动创建 <code>myblog</code> 文件夹并生成需要的文件</p>
<h3 id="安装主题">安装主题</h3>
<p><a href="https://themes.gohugo.io">https://themes.gohugo.io</a> Hugo 官方汇总的主题列表，可以去看看，很多主题都有demo可以预览一下，主题的使用教程都比较详细</p>
<p>例如安装 Notepadium 主题 <a href="https://themes.gohugo.io/hugo-notepadium/">https://themes.gohugo.io/hugo-notepadium/</a></p>
<p>在 <code>myblog</code> 目录下，输入 git 命令,</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git submodule add https://github.com/cntrump/hugo-notepadium.git themes/hugo-notepadium
</code></pre></div><blockquote>
<p>git submodule add &lt;仓库地址&gt; &lt;本地路径&gt; ：Git Submodule 允许一个 git 仓库，作为另一个 git 仓库的子目录</p>
</blockquote>
<p>以后更新主题可以使用命令</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git submodule update --remote --merge
</code></pre></div><p>因为主题中配置文件更易用，所以将主题目录中 <code>exampleSite</code> 的 <code>config.toml</code> 复制到 <code>myblog</code> 的目录下进行配置</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">mv config.toml config.toml.old
mv themes/hugo-notepadium/exampleSite/config.toml config.toml
</code></pre></div><p>具体配置请参考每个主题下的介绍内容或者<a href="https://www.baidu.com/s?ie=utf-8&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=hugo%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6&amp;fenlei=256&amp;rsv_pq=f5192e0f000cf9fe&amp;rsv_t=25f0gQhKS91drcQT4D%2BGMV1YZbAxF6mz1jJJYvIldwLbvEV1C1MKcnKUCNM&amp;rqlang=cn&amp;rsv_dl=ts_1&amp;rsv_enter=1&amp;rsv_sug3=12&amp;rsv_sug1=9&amp;rsv_sug7=101&amp;rsv_sug2=1&amp;rsv_btype=i&amp;prefixsug=hugo%2520peizhi&amp;rsp=1&amp;inputT=4189&amp;rsv_sug4=5196">去搜</a></p>
<h3 id="创建一篇文章">创建一篇文章</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">hugo new post/firstblog.md
</code></pre></div><p>则会在<code>content/</code>目录内生成一个<code>post</code>文件夹，该文件夹就是用来存储你所创建编写的markdown文档</p>
<h3 id="生成博客">生成博客</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">hugo server -D
</code></pre></div><blockquote>
<p>server 建立服务器   -D 生成静态页面文件（包括标记为草稿的内容）</p>
</blockquote>
<p>输入后访问<a href="http://localhost:1313">http://localhost:1313</a> 即可在本地看到生成博客的页面效果</p>
<h3 id="推送到-github上以下很多内容摘抄自berlin的博客">推送到 Github上（以下很多内容摘抄自<strong>Berlin</strong>的博客）</h3>
<p>这里主要说推送到个人主页的方式</p>
<p>首先，需要把 <code>public/</code> 目录删除</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">rm -rf public/
</code></pre></div><p>把 <code>public/</code> 目录添加为 <code>submodule</code></p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git init git submodule add git@github.com:XXX/xxx.github.io public <span class="c1"># xxx是Github的username</span>
</code></pre></div><blockquote>
<p>此处有个坑就是本机 git 默认分支名是 master，而 Github 中默认分支名已改成了main，因此需要把本地分支名称改为main</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git branch -m main
</code></pre></div><p>添加文件添加 <code>.gitignore</code> 文件，文件中写 <code>public/</code>，在同步到 myhugo 时会忽略 <code>public</code> 文件夹</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">vi .gitignore
public/
</code></pre></div><p>:wq 保存退出</p>
<p>将静态页上传到 <code>用户名.github.io</code> 的工作可以借助一个 <code>deploy.sh</code> 脚本来完成</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="nb">echo</span> -e <span class="s2">&#34;\033[0;32mDeploying updates to GitHub...\033[0m&#34;</span>

<span class="c1"># Build the project.</span>
hugo <span class="c1"># if using a theme, replace with `hugo -t &lt;YOURTHEME&gt;`</span>

<span class="c1"># Go To Public folder</span>
<span class="nb">cd</span> public
<span class="c1"># Add changes to git.</span>
git add .

<span class="c1"># Commit changes.</span>
<span class="nv">msg</span><span class="o">=</span><span class="s2">&#34;rebuilding site `date`&#34;</span>
<span class="k">if</span> <span class="o">[</span> <span class="nv">$#</span> -eq <span class="m">1</span> <span class="o">]</span>
  <span class="k">then</span> <span class="nv">msg</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span>
<span class="k">fi</span>
git commit -m <span class="s2">&#34;</span><span class="nv">$msg</span><span class="s2">&#34;</span>

<span class="c1"># Push source and build repos.</span>
git push origin main

<span class="c1"># Come Back up to the Project Root</span>
<span class="nb">cd</span> ..
</code></pre></div><p>把以上命令保存为 .sh 文件，然后再运行以下命令,修改 <code>deploy.sh</code> 的权限</p>
<pre><code>chmod +x deploy.sh
</code></pre><p>运行以下命令完成 <code>push</code> 整个博客的操作</p>
<pre><code>./deploy.sh &quot;Your optional commit message&quot;
</code></pre><p>然后把 <code>myblog</code> 里的内容同步到 GitHub 上。同时要在 <code>data</code>、<code>layouts</code>、<code>static</code> 里面添加一个 <code>.gitkeep</code> 文件，以保持目录结构。记住一定要删掉你的主题目录里面的 <code>.git</code> 文件夹</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git remote add origin git@github.com:github_user_name/your_repository.git    <span class="c1">#  your_repository 即你存放你的博客源文件的仓库</span>
git pull origin main
git add .
git commit -m <span class="s2">&#34;the message you want to write&#34;</span>
git push -u origin main    <span class="c1"># 第二次 push 可以不用加 -u</span>
</code></pre></div><p>到这里就大功告成了，如果你要在另一台电脑上继续写博客，只要把 <code>myhugo</code>克隆下来，然后把里面“看得见”的东西拷贝到一个新的文件夹(即除了 <code>.git</code> 、<code>.gitmodule</code> 等)，然后再重复刚才创建 git 子模块的那些步骤，当然你要准备 Hugo 环境。如果你想获取你的主题的最新更新，则在你的主题根目录下运行如下命令：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git init
git remote add origin https://github.com/author_name/your_theme_repo_name.git
git pull    <span class="c1"># or git pull origin main</span>
</code></pre></div><h2 id="3-参考资料">3. 参考资料</h2>
<p><a href="https://fengberlin.github.io/post/use-hugo-to-build-blog/">使用Hugo搭建个人博客</a>，by Berlin</p>
<p><a href="https://gohugo.io/">HUGO官网</a></p>
]]></content>
		</item>
		
	</channel>
</rss>
